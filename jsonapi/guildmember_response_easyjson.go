// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package jsonapi

import (
	json "encoding/json"

	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"

	snowflake "github.com/gsmcwhirter/discord-bot-lib/v15/snowflake"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson76b0dc3DecodeGithubComGsmcwhirterDiscordBotLibV15Jsonapi(in *jlexer.Lexer, out *GuildMemberResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(UserResponse)
				}
				(*out.User).UnmarshalEasyJSON(in)
			}
		case "nick":
			out.Nick = string(in.String())
		case "roles":
			if in.IsNull() {
				in.Skip()
				out.Roles = nil
			} else {
				in.Delim('[')
				if out.Roles == nil {
					if !in.IsDelim(']') {
						out.Roles = make([]snowflake.Snowflake, 0, 8)
					} else {
						out.Roles = []snowflake.Snowflake{}
					}
				} else {
					out.Roles = (out.Roles)[:0]
				}
				for !in.IsDelim(']') {
					var v1 snowflake.Snowflake
					v1 = snowflake.Snowflake(in.Uint64())
					out.Roles = append(out.Roles, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "joined_at":
			out.JoinedAt = string(in.String())
		case "premium_since":
			out.PremiumSince = string(in.String())
		case "deaf":
			out.Deaf = bool(in.Bool())
		case "mute":
			out.Mute = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson76b0dc3EncodeGithubComGsmcwhirterDiscordBotLibV15Jsonapi(out *jwriter.Writer, in GuildMemberResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix[1:])
		if in.User == nil {
			out.RawString("null")
		} else {
			(*in.User).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"nick\":"
		out.RawString(prefix)
		out.String(string(in.Nick))
	}
	{
		const prefix string = ",\"roles\":"
		out.RawString(prefix)
		if in.Roles == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Roles {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.Uint64(uint64(v3))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"joined_at\":"
		out.RawString(prefix)
		out.String(string(in.JoinedAt))
	}
	{
		const prefix string = ",\"premium_since\":"
		out.RawString(prefix)
		out.String(string(in.PremiumSince))
	}
	{
		const prefix string = ",\"deaf\":"
		out.RawString(prefix)
		out.Bool(bool(in.Deaf))
	}
	{
		const prefix string = ",\"mute\":"
		out.RawString(prefix)
		out.Bool(bool(in.Mute))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GuildMemberResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson76b0dc3EncodeGithubComGsmcwhirterDiscordBotLibV15Jsonapi(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GuildMemberResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson76b0dc3EncodeGithubComGsmcwhirterDiscordBotLibV15Jsonapi(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GuildMemberResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson76b0dc3DecodeGithubComGsmcwhirterDiscordBotLibV15Jsonapi(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GuildMemberResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson76b0dc3DecodeGithubComGsmcwhirterDiscordBotLibV15Jsonapi(l, v)
}
