// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package jsonapi

import (
	json "encoding/json"

	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"

	snowflake "github.com/gsmcwhirter/discord-bot-lib/v17/snowflake"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6462a441DecodeGithubComGsmcwhirterDiscordBotLibV17Jsonapi(in *jlexer.Lexer, out *RoleResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "color":
			out.Color = int(in.Int())
		case "hoist":
			out.Hoist = bool(in.Bool())
		case "position":
			out.Position = int(in.Int())
		case "permissions":
			out.Permissions = int(in.Int())
		case "managed":
			out.Managed = bool(in.Bool())
		case "mentionable":
			out.Mentionable = bool(in.Bool())
		case "IDSnowflake":
			out.IDSnowflake = snowflake.Snowflake(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6462a441EncodeGithubComGsmcwhirterDiscordBotLibV17Jsonapi(out *jwriter.Writer, in RoleResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"color\":"
		out.RawString(prefix)
		out.Int(int(in.Color))
	}
	{
		const prefix string = ",\"hoist\":"
		out.RawString(prefix)
		out.Bool(bool(in.Hoist))
	}
	{
		const prefix string = ",\"position\":"
		out.RawString(prefix)
		out.Int(int(in.Position))
	}
	{
		const prefix string = ",\"permissions\":"
		out.RawString(prefix)
		out.Int(int(in.Permissions))
	}
	{
		const prefix string = ",\"managed\":"
		out.RawString(prefix)
		out.Bool(bool(in.Managed))
	}
	{
		const prefix string = ",\"mentionable\":"
		out.RawString(prefix)
		out.Bool(bool(in.Mentionable))
	}
	{
		const prefix string = ",\"IDSnowflake\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.IDSnowflake))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RoleResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6462a441EncodeGithubComGsmcwhirterDiscordBotLibV17Jsonapi(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RoleResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6462a441EncodeGithubComGsmcwhirterDiscordBotLibV17Jsonapi(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RoleResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6462a441DecodeGithubComGsmcwhirterDiscordBotLibV17Jsonapi(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RoleResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6462a441DecodeGithubComGsmcwhirterDiscordBotLibV17Jsonapi(l, v)
}
func easyjson6462a441DecodeGithubComGsmcwhirterDiscordBotLibV17Jsonapi1(in *jlexer.Lexer, out *ReactionResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "count":
			out.Count = int(in.Int())
		case "me":
			out.Me = bool(in.Bool())
		case "emoji":
			(out.Emoji).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6462a441EncodeGithubComGsmcwhirterDiscordBotLibV17Jsonapi1(out *jwriter.Writer, in ReactionResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Count))
	}
	{
		const prefix string = ",\"me\":"
		out.RawString(prefix)
		out.Bool(bool(in.Me))
	}
	{
		const prefix string = ",\"emoji\":"
		out.RawString(prefix)
		(in.Emoji).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReactionResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6462a441EncodeGithubComGsmcwhirterDiscordBotLibV17Jsonapi1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReactionResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6462a441EncodeGithubComGsmcwhirterDiscordBotLibV17Jsonapi1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReactionResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6462a441DecodeGithubComGsmcwhirterDiscordBotLibV17Jsonapi1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReactionResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6462a441DecodeGithubComGsmcwhirterDiscordBotLibV17Jsonapi1(l, v)
}
func easyjson6462a441DecodeGithubComGsmcwhirterDiscordBotLibV17Jsonapi2(in *jlexer.Lexer, out *MessageResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "channel_id":
			out.ChannelID = string(in.String())
		case "guild_id":
			out.GuildID = string(in.String())
		case "author":
			(out.Author).UnmarshalEasyJSON(in)
		case "member":
			(out.Member).UnmarshalEasyJSON(in)
		case "content":
			out.Content = string(in.String())
		case "timestamp":
			out.Timestamp = string(in.String())
		case "edited_timestamp":
			out.EditedTimestamp = string(in.String())
		case "tts":
			out.TTS = bool(in.Bool())
		case "mention_everyone":
			out.MentionEveryone = bool(in.Bool())
		case "mentions":
			if in.IsNull() {
				in.Skip()
				out.Mentions = nil
			} else {
				in.Delim('[')
				if out.Mentions == nil {
					if !in.IsDelim(']') {
						out.Mentions = make([]UserResponse, 0, 0)
					} else {
						out.Mentions = []UserResponse{}
					}
				} else {
					out.Mentions = (out.Mentions)[:0]
				}
				for !in.IsDelim(']') {
					var v1 UserResponse
					(v1).UnmarshalEasyJSON(in)
					out.Mentions = append(out.Mentions, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "mention_roles":
			if in.IsNull() {
				in.Skip()
				out.MentionRoles = nil
			} else {
				in.Delim('[')
				if out.MentionRoles == nil {
					if !in.IsDelim(']') {
						out.MentionRoles = make([]RoleResponse, 0, 0)
					} else {
						out.MentionRoles = []RoleResponse{}
					}
				} else {
					out.MentionRoles = (out.MentionRoles)[:0]
				}
				for !in.IsDelim(']') {
					var v2 RoleResponse
					(v2).UnmarshalEasyJSON(in)
					out.MentionRoles = append(out.MentionRoles, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "mention_channels":
			if in.IsNull() {
				in.Skip()
				out.MentionChannels = nil
			} else {
				in.Delim('[')
				if out.MentionChannels == nil {
					if !in.IsDelim(']') {
						out.MentionChannels = make([]ChannelMentionResponse, 0, 0)
					} else {
						out.MentionChannels = []ChannelMentionResponse{}
					}
				} else {
					out.MentionChannels = (out.MentionChannels)[:0]
				}
				for !in.IsDelim(']') {
					var v3 ChannelMentionResponse
					(v3).UnmarshalEasyJSON(in)
					out.MentionChannels = append(out.MentionChannels, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]AttachmentResponse, 0, 0)
					} else {
						out.Attachments = []AttachmentResponse{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v4 AttachmentResponse
					(v4).UnmarshalEasyJSON(in)
					out.Attachments = append(out.Attachments, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "embeds":
			if in.IsNull() {
				in.Skip()
				out.Embeds = nil
			} else {
				in.Delim('[')
				if out.Embeds == nil {
					if !in.IsDelim(']') {
						out.Embeds = make([]EmbedResponse, 0, 0)
					} else {
						out.Embeds = []EmbedResponse{}
					}
				} else {
					out.Embeds = (out.Embeds)[:0]
				}
				for !in.IsDelim(']') {
					var v5 EmbedResponse
					(v5).UnmarshalEasyJSON(in)
					out.Embeds = append(out.Embeds, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "reactions":
			if in.IsNull() {
				in.Skip()
				out.Reactions = nil
			} else {
				in.Delim('[')
				if out.Reactions == nil {
					if !in.IsDelim(']') {
						out.Reactions = make([]ReactionResponse, 0, 0)
					} else {
						out.Reactions = []ReactionResponse{}
					}
				} else {
					out.Reactions = (out.Reactions)[:0]
				}
				for !in.IsDelim(']') {
					var v6 ReactionResponse
					(v6).UnmarshalEasyJSON(in)
					out.Reactions = append(out.Reactions, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pinned":
			out.Pinned = bool(in.Bool())
		case "webhook_id":
			out.WebhookID = string(in.String())
		case "type":
			out.Type = int(in.Int())
		case "flags":
			out.Flags = int(in.Int())
		case "IDSnowflake":
			out.IDSnowflake = snowflake.Snowflake(in.Uint64())
		case "ChannelIDSnowflake":
			out.ChannelIDSnowflake = snowflake.Snowflake(in.Uint64())
		case "GuildIDSnowflake":
			out.GuildIDSnowflake = snowflake.Snowflake(in.Uint64())
		case "WebhookIDSnowflake":
			out.WebhookIDSnowflake = snowflake.Snowflake(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6462a441EncodeGithubComGsmcwhirterDiscordBotLibV17Jsonapi2(out *jwriter.Writer, in MessageResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"channel_id\":"
		out.RawString(prefix)
		out.String(string(in.ChannelID))
	}
	{
		const prefix string = ",\"guild_id\":"
		out.RawString(prefix)
		out.String(string(in.GuildID))
	}
	{
		const prefix string = ",\"author\":"
		out.RawString(prefix)
		(in.Author).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"member\":"
		out.RawString(prefix)
		(in.Member).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"content\":"
		out.RawString(prefix)
		out.String(string(in.Content))
	}
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix)
		out.String(string(in.Timestamp))
	}
	{
		const prefix string = ",\"edited_timestamp\":"
		out.RawString(prefix)
		out.String(string(in.EditedTimestamp))
	}
	{
		const prefix string = ",\"tts\":"
		out.RawString(prefix)
		out.Bool(bool(in.TTS))
	}
	{
		const prefix string = ",\"mention_everyone\":"
		out.RawString(prefix)
		out.Bool(bool(in.MentionEveryone))
	}
	{
		const prefix string = ",\"mentions\":"
		out.RawString(prefix)
		if in.Mentions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v7, v8 := range in.Mentions {
				if v7 > 0 {
					out.RawByte(',')
				}
				(v8).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"mention_roles\":"
		out.RawString(prefix)
		if in.MentionRoles == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v9, v10 := range in.MentionRoles {
				if v9 > 0 {
					out.RawByte(',')
				}
				(v10).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"mention_channels\":"
		out.RawString(prefix)
		if in.MentionChannels == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.MentionChannels {
				if v11 > 0 {
					out.RawByte(',')
				}
				(v12).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"attachments\":"
		out.RawString(prefix)
		if in.Attachments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v13, v14 := range in.Attachments {
				if v13 > 0 {
					out.RawByte(',')
				}
				(v14).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"embeds\":"
		out.RawString(prefix)
		if in.Embeds == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v15, v16 := range in.Embeds {
				if v15 > 0 {
					out.RawByte(',')
				}
				(v16).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"reactions\":"
		out.RawString(prefix)
		if in.Reactions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.Reactions {
				if v17 > 0 {
					out.RawByte(',')
				}
				(v18).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"pinned\":"
		out.RawString(prefix)
		out.Bool(bool(in.Pinned))
	}
	{
		const prefix string = ",\"webhook_id\":"
		out.RawString(prefix)
		out.String(string(in.WebhookID))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.Int(int(in.Type))
	}
	{
		const prefix string = ",\"flags\":"
		out.RawString(prefix)
		out.Int(int(in.Flags))
	}
	{
		const prefix string = ",\"IDSnowflake\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.IDSnowflake))
	}
	{
		const prefix string = ",\"ChannelIDSnowflake\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.ChannelIDSnowflake))
	}
	{
		const prefix string = ",\"GuildIDSnowflake\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.GuildIDSnowflake))
	}
	{
		const prefix string = ",\"WebhookIDSnowflake\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.WebhookIDSnowflake))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MessageResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6462a441EncodeGithubComGsmcwhirterDiscordBotLibV17Jsonapi2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MessageResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6462a441EncodeGithubComGsmcwhirterDiscordBotLibV17Jsonapi2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MessageResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6462a441DecodeGithubComGsmcwhirterDiscordBotLibV17Jsonapi2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MessageResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6462a441DecodeGithubComGsmcwhirterDiscordBotLibV17Jsonapi2(l, v)
}
func easyjson6462a441DecodeGithubComGsmcwhirterDiscordBotLibV17Jsonapi3(in *jlexer.Lexer, out *EmojiResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "roles":
			if in.IsNull() {
				in.Skip()
				out.Roles = nil
			} else {
				in.Delim('[')
				if out.Roles == nil {
					if !in.IsDelim(']') {
						out.Roles = make([]RoleResponse, 0, 0)
					} else {
						out.Roles = []RoleResponse{}
					}
				} else {
					out.Roles = (out.Roles)[:0]
				}
				for !in.IsDelim(']') {
					var v19 RoleResponse
					(v19).UnmarshalEasyJSON(in)
					out.Roles = append(out.Roles, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "user":
			(out.User).UnmarshalEasyJSON(in)
		case "require_colons":
			out.RequireColons = bool(in.Bool())
		case "managed":
			out.Managed = bool(in.Bool())
		case "animated":
			out.Animated = bool(in.Bool())
		case "available":
			out.Available = bool(in.Bool())
		case "IDSnowflake":
			out.IDSnowflake = snowflake.Snowflake(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6462a441EncodeGithubComGsmcwhirterDiscordBotLibV17Jsonapi3(out *jwriter.Writer, in EmojiResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"roles\":"
		out.RawString(prefix)
		if in.Roles == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v20, v21 := range in.Roles {
				if v20 > 0 {
					out.RawByte(',')
				}
				(v21).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		(in.User).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"require_colons\":"
		out.RawString(prefix)
		out.Bool(bool(in.RequireColons))
	}
	{
		const prefix string = ",\"managed\":"
		out.RawString(prefix)
		out.Bool(bool(in.Managed))
	}
	{
		const prefix string = ",\"animated\":"
		out.RawString(prefix)
		out.Bool(bool(in.Animated))
	}
	{
		const prefix string = ",\"available\":"
		out.RawString(prefix)
		out.Bool(bool(in.Available))
	}
	{
		const prefix string = ",\"IDSnowflake\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.IDSnowflake))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EmojiResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6462a441EncodeGithubComGsmcwhirterDiscordBotLibV17Jsonapi3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EmojiResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6462a441EncodeGithubComGsmcwhirterDiscordBotLibV17Jsonapi3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EmojiResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6462a441DecodeGithubComGsmcwhirterDiscordBotLibV17Jsonapi3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EmojiResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6462a441DecodeGithubComGsmcwhirterDiscordBotLibV17Jsonapi3(l, v)
}
func easyjson6462a441DecodeGithubComGsmcwhirterDiscordBotLibV17Jsonapi4(in *jlexer.Lexer, out *EmbedResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			out.Title = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "url":
			out.URL = string(in.String())
		case "timestamp":
			out.Timestamp = string(in.String())
		case "color":
			out.Color = int(in.Int())
		case "footer":
			(out.Footer).UnmarshalEasyJSON(in)
		case "image":
			(out.Image).UnmarshalEasyJSON(in)
		case "thumbnail":
			(out.Thumbnail).UnmarshalEasyJSON(in)
		case "video":
			(out.Video).UnmarshalEasyJSON(in)
		case "provider":
			(out.Provider).UnmarshalEasyJSON(in)
		case "author":
			(out.Author).UnmarshalEasyJSON(in)
		case "fields":
			if in.IsNull() {
				in.Skip()
				out.Fields = nil
			} else {
				in.Delim('[')
				if out.Fields == nil {
					if !in.IsDelim(']') {
						out.Fields = make([]EmbedFieldResponse, 0, 1)
					} else {
						out.Fields = []EmbedFieldResponse{}
					}
				} else {
					out.Fields = (out.Fields)[:0]
				}
				for !in.IsDelim(']') {
					var v22 EmbedFieldResponse
					(v22).UnmarshalEasyJSON(in)
					out.Fields = append(out.Fields, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6462a441EncodeGithubComGsmcwhirterDiscordBotLibV17Jsonapi4(out *jwriter.Writer, in EmbedResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix[1:])
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix)
		out.String(string(in.Timestamp))
	}
	{
		const prefix string = ",\"color\":"
		out.RawString(prefix)
		out.Int(int(in.Color))
	}
	{
		const prefix string = ",\"footer\":"
		out.RawString(prefix)
		(in.Footer).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"image\":"
		out.RawString(prefix)
		(in.Image).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"thumbnail\":"
		out.RawString(prefix)
		(in.Thumbnail).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"video\":"
		out.RawString(prefix)
		(in.Video).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"provider\":"
		out.RawString(prefix)
		(in.Provider).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"author\":"
		out.RawString(prefix)
		(in.Author).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"fields\":"
		out.RawString(prefix)
		if in.Fields == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.Fields {
				if v23 > 0 {
					out.RawByte(',')
				}
				(v24).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EmbedResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6462a441EncodeGithubComGsmcwhirterDiscordBotLibV17Jsonapi4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EmbedResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6462a441EncodeGithubComGsmcwhirterDiscordBotLibV17Jsonapi4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EmbedResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6462a441DecodeGithubComGsmcwhirterDiscordBotLibV17Jsonapi4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EmbedResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6462a441DecodeGithubComGsmcwhirterDiscordBotLibV17Jsonapi4(l, v)
}
func easyjson6462a441DecodeGithubComGsmcwhirterDiscordBotLibV17Jsonapi5(in *jlexer.Lexer, out *EmbedProviderResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "url":
			out.URL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6462a441EncodeGithubComGsmcwhirterDiscordBotLibV17Jsonapi5(out *jwriter.Writer, in EmbedProviderResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.URL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EmbedProviderResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6462a441EncodeGithubComGsmcwhirterDiscordBotLibV17Jsonapi5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EmbedProviderResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6462a441EncodeGithubComGsmcwhirterDiscordBotLibV17Jsonapi5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EmbedProviderResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6462a441DecodeGithubComGsmcwhirterDiscordBotLibV17Jsonapi5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EmbedProviderResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6462a441DecodeGithubComGsmcwhirterDiscordBotLibV17Jsonapi5(l, v)
}
func easyjson6462a441DecodeGithubComGsmcwhirterDiscordBotLibV17Jsonapi6(in *jlexer.Lexer, out *EmbedImageResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "url":
			out.URL = string(in.String())
		case "proxy_url":
			out.ProxyURL = string(in.String())
		case "height":
			out.Height = int(in.Int())
		case "width":
			out.Width = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6462a441EncodeGithubComGsmcwhirterDiscordBotLibV17Jsonapi6(out *jwriter.Writer, in EmbedImageResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix[1:])
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"proxy_url\":"
		out.RawString(prefix)
		out.String(string(in.ProxyURL))
	}
	{
		const prefix string = ",\"height\":"
		out.RawString(prefix)
		out.Int(int(in.Height))
	}
	{
		const prefix string = ",\"width\":"
		out.RawString(prefix)
		out.Int(int(in.Width))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EmbedImageResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6462a441EncodeGithubComGsmcwhirterDiscordBotLibV17Jsonapi6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EmbedImageResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6462a441EncodeGithubComGsmcwhirterDiscordBotLibV17Jsonapi6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EmbedImageResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6462a441DecodeGithubComGsmcwhirterDiscordBotLibV17Jsonapi6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EmbedImageResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6462a441DecodeGithubComGsmcwhirterDiscordBotLibV17Jsonapi6(l, v)
}
func easyjson6462a441DecodeGithubComGsmcwhirterDiscordBotLibV17Jsonapi7(in *jlexer.Lexer, out *EmbedFooterResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "text":
			out.Text = string(in.String())
		case "icon_url":
			out.IconURL = string(in.String())
		case "proxy_icon_url":
			out.ProxyIconURL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6462a441EncodeGithubComGsmcwhirterDiscordBotLibV17Jsonapi7(out *jwriter.Writer, in EmbedFooterResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix[1:])
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"icon_url\":"
		out.RawString(prefix)
		out.String(string(in.IconURL))
	}
	{
		const prefix string = ",\"proxy_icon_url\":"
		out.RawString(prefix)
		out.String(string(in.ProxyIconURL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EmbedFooterResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6462a441EncodeGithubComGsmcwhirterDiscordBotLibV17Jsonapi7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EmbedFooterResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6462a441EncodeGithubComGsmcwhirterDiscordBotLibV17Jsonapi7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EmbedFooterResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6462a441DecodeGithubComGsmcwhirterDiscordBotLibV17Jsonapi7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EmbedFooterResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6462a441DecodeGithubComGsmcwhirterDiscordBotLibV17Jsonapi7(l, v)
}
func easyjson6462a441DecodeGithubComGsmcwhirterDiscordBotLibV17Jsonapi8(in *jlexer.Lexer, out *EmbedFieldResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "value":
			out.Value = string(in.String())
		case "inline":
			out.Inline = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6462a441EncodeGithubComGsmcwhirterDiscordBotLibV17Jsonapi8(out *jwriter.Writer, in EmbedFieldResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		out.String(string(in.Value))
	}
	{
		const prefix string = ",\"inline\":"
		out.RawString(prefix)
		out.Bool(bool(in.Inline))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EmbedFieldResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6462a441EncodeGithubComGsmcwhirterDiscordBotLibV17Jsonapi8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EmbedFieldResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6462a441EncodeGithubComGsmcwhirterDiscordBotLibV17Jsonapi8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EmbedFieldResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6462a441DecodeGithubComGsmcwhirterDiscordBotLibV17Jsonapi8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EmbedFieldResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6462a441DecodeGithubComGsmcwhirterDiscordBotLibV17Jsonapi8(l, v)
}
func easyjson6462a441DecodeGithubComGsmcwhirterDiscordBotLibV17Jsonapi9(in *jlexer.Lexer, out *EmbedAuthorResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "url":
			out.URL = string(in.String())
		case "icon_url":
			out.IconURL = string(in.String())
		case "proxy_icon_url":
			out.ProxyIconURL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6462a441EncodeGithubComGsmcwhirterDiscordBotLibV17Jsonapi9(out *jwriter.Writer, in EmbedAuthorResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"icon_url\":"
		out.RawString(prefix)
		out.String(string(in.IconURL))
	}
	{
		const prefix string = ",\"proxy_icon_url\":"
		out.RawString(prefix)
		out.String(string(in.ProxyIconURL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EmbedAuthorResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6462a441EncodeGithubComGsmcwhirterDiscordBotLibV17Jsonapi9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EmbedAuthorResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6462a441EncodeGithubComGsmcwhirterDiscordBotLibV17Jsonapi9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EmbedAuthorResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6462a441DecodeGithubComGsmcwhirterDiscordBotLibV17Jsonapi9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EmbedAuthorResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6462a441DecodeGithubComGsmcwhirterDiscordBotLibV17Jsonapi9(l, v)
}
func easyjson6462a441DecodeGithubComGsmcwhirterDiscordBotLibV17Jsonapi10(in *jlexer.Lexer, out *ChannelMentionResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "guild_id":
			out.GuildID = string(in.String())
		case "type":
			out.Type = int(in.Int())
		case "name":
			out.Name = string(in.String())
		case "IDSnowflake":
			out.IDSnowflake = snowflake.Snowflake(in.Uint64())
		case "GuildIDSnowflake":
			out.GuildIDSnowflake = snowflake.Snowflake(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6462a441EncodeGithubComGsmcwhirterDiscordBotLibV17Jsonapi10(out *jwriter.Writer, in ChannelMentionResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"guild_id\":"
		out.RawString(prefix)
		out.String(string(in.GuildID))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.Int(int(in.Type))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"IDSnowflake\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.IDSnowflake))
	}
	{
		const prefix string = ",\"GuildIDSnowflake\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.GuildIDSnowflake))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChannelMentionResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6462a441EncodeGithubComGsmcwhirterDiscordBotLibV17Jsonapi10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChannelMentionResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6462a441EncodeGithubComGsmcwhirterDiscordBotLibV17Jsonapi10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChannelMentionResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6462a441DecodeGithubComGsmcwhirterDiscordBotLibV17Jsonapi10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChannelMentionResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6462a441DecodeGithubComGsmcwhirterDiscordBotLibV17Jsonapi10(l, v)
}
func easyjson6462a441DecodeGithubComGsmcwhirterDiscordBotLibV17Jsonapi11(in *jlexer.Lexer, out *AttachmentResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "filename":
			out.Filename = string(in.String())
		case "size":
			out.Size = int(in.Int())
		case "url":
			out.URL = string(in.String())
		case "proxy_url":
			out.ProxyURL = string(in.String())
		case "height":
			out.Height = int(in.Int())
		case "width":
			out.Width = int(in.Int())
		case "IDSnowflake":
			out.IDSnowflake = snowflake.Snowflake(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6462a441EncodeGithubComGsmcwhirterDiscordBotLibV17Jsonapi11(out *jwriter.Writer, in AttachmentResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"filename\":"
		out.RawString(prefix)
		out.String(string(in.Filename))
	}
	{
		const prefix string = ",\"size\":"
		out.RawString(prefix)
		out.Int(int(in.Size))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"proxy_url\":"
		out.RawString(prefix)
		out.String(string(in.ProxyURL))
	}
	{
		const prefix string = ",\"height\":"
		out.RawString(prefix)
		out.Int(int(in.Height))
	}
	{
		const prefix string = ",\"width\":"
		out.RawString(prefix)
		out.Int(int(in.Width))
	}
	{
		const prefix string = ",\"IDSnowflake\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.IDSnowflake))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AttachmentResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6462a441EncodeGithubComGsmcwhirterDiscordBotLibV17Jsonapi11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AttachmentResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6462a441EncodeGithubComGsmcwhirterDiscordBotLibV17Jsonapi11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AttachmentResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6462a441DecodeGithubComGsmcwhirterDiscordBotLibV17Jsonapi11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AttachmentResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6462a441DecodeGithubComGsmcwhirterDiscordBotLibV17Jsonapi11(l, v)
}
