// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package jsonapi

import (
	json "encoding/json"
	snowflake "github.com/gsmcwhirter/discord-bot-lib/v13/snowflake"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson36e32773DecodeGithubComGsmcwhirterDiscordBotLibV13Jsonapi(in *jlexer.Lexer, out *UserResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = snowflake.Snowflake(in.Uint64())
		case "username":
			out.Username = string(in.String())
		case "discriminator":
			out.Discriminator = string(in.String())
		case "avatar":
			out.Avatar = string(in.String())
		case "bot":
			out.Bot = bool(in.Bool())
		case "system":
			out.System = bool(in.Bool())
		case "mfa_enabled":
			out.MFAEnabled = bool(in.Bool())
		case "locale":
			out.Locale = string(in.String())
		case "verified":
			out.Verified = bool(in.Bool())
		case "email":
			out.Email = string(in.String())
		case "flags":
			out.Flags = int(in.Int())
		case "premium_type":
			out.PremiumType = int(in.Int())
		case "public_flags":
			out.PublicFlags = int(in.Int())
		case "member":
			if in.IsNull() {
				in.Skip()
				out.Member = nil
			} else {
				if out.Member == nil {
					out.Member = new(GuildMemberResponse)
				}
				(*out.Member).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36e32773EncodeGithubComGsmcwhirterDiscordBotLibV13Jsonapi(out *jwriter.Writer, in UserResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"discriminator\":"
		out.RawString(prefix)
		out.String(string(in.Discriminator))
	}
	{
		const prefix string = ",\"avatar\":"
		out.RawString(prefix)
		out.String(string(in.Avatar))
	}
	{
		const prefix string = ",\"bot\":"
		out.RawString(prefix)
		out.Bool(bool(in.Bot))
	}
	{
		const prefix string = ",\"system\":"
		out.RawString(prefix)
		out.Bool(bool(in.System))
	}
	{
		const prefix string = ",\"mfa_enabled\":"
		out.RawString(prefix)
		out.Bool(bool(in.MFAEnabled))
	}
	{
		const prefix string = ",\"locale\":"
		out.RawString(prefix)
		out.String(string(in.Locale))
	}
	{
		const prefix string = ",\"verified\":"
		out.RawString(prefix)
		out.Bool(bool(in.Verified))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"flags\":"
		out.RawString(prefix)
		out.Int(int(in.Flags))
	}
	{
		const prefix string = ",\"premium_type\":"
		out.RawString(prefix)
		out.Int(int(in.PremiumType))
	}
	{
		const prefix string = ",\"public_flags\":"
		out.RawString(prefix)
		out.Int(int(in.PublicFlags))
	}
	{
		const prefix string = ",\"member\":"
		out.RawString(prefix)
		if in.Member == nil {
			out.RawString("null")
		} else {
			(*in.Member).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36e32773EncodeGithubComGsmcwhirterDiscordBotLibV13Jsonapi(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36e32773EncodeGithubComGsmcwhirterDiscordBotLibV13Jsonapi(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36e32773DecodeGithubComGsmcwhirterDiscordBotLibV13Jsonapi(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36e32773DecodeGithubComGsmcwhirterDiscordBotLibV13Jsonapi(l, v)
}
